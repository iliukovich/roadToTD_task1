package unittests;

import org.testng.Assert;
import org.testng.annotations.*;
import pen.Pen;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.lang.reflect.Field;
import java.nio.file.Files;
import java.nio.file.Paths;

public class PenTest {

    @BeforeMethod
    public void logStart() {
        System.out.println("Test is started.");
    }

    @Test(groups = {"checkColor"})
    public void checkColor() {
        String expectedColor = "RED";
        Pen coloredPen = new Pen(100, 1.0, expectedColor);
        Assert.assertEquals(coloredPen.getColor(), expectedColor, "Pen's color is not equal to entered one");
    }

    @Test(groups = {"checkInkValueGroup"})
    @Parameters("wordForTest")
    public void checkInkForRandomWord(String wordForTest) throws NoSuchFieldException, IllegalAccessException {
        double sizeLetter = 1.0;
        int expectedInkContainerValue = 45;
        Pen penForOneCharacter = new Pen(expectedInkContainerValue, sizeLetter);
        expectedInkContainerValue -= (int) sizeLetter*wordForTest.length();

        penForOneCharacter.write(wordForTest);

        int actualInkContainerValue = getInkContainerValueByReflection(penForOneCharacter);

        Assert.assertEquals(actualInkContainerValue, expectedInkContainerValue, "inkContainerValue is changed incorrectly");
    }

    @Test
    public void checkInkForSpaceWord() throws NoSuchFieldException, IllegalAccessException {
        String spaceWord = " ";
        double sizeLetter = 1.0;
        int expectedInkContainerValue = 100;
        Pen penForSpaceWord = new Pen(expectedInkContainerValue, sizeLetter);

        penForSpaceWord.write(spaceWord);

        int actualInkContainerValue = getInkContainerValueByReflection(penForSpaceWord);

        Assert.assertEquals(actualInkContainerValue, expectedInkContainerValue, "Ink is decreased when writing white space character");
    }

    @Test
    public void checkInkValueIsNullWhenInkFinishedWhileWriting() throws NoSuchFieldException, IllegalAccessException {
        String wordMoreThanInkValue = "example";
        double sizeLetter = 1.0;
        int expectedInkContainerValue = 6;
        Pen penForInkOfPartWord = new Pen(expectedInkContainerValue, sizeLetter);

        penForInkOfPartWord.write(wordMoreThanInkValue);
        expectedInkContainerValue = 0;

        int actualInkContainerValue = getInkContainerValueByReflection(penForInkOfPartWord);

        Assert.assertEquals(actualInkContainerValue, expectedInkContainerValue, "Ink is not empty");
    }

    @Test
    public void checkWritingPartOfWord() {
        String wordMoreThanInkValue = "example";
        double sizeLetter = 1.0;
        int expectedInkContainerValue = 6;
        Pen penForPartOfWord = new Pen(expectedInkContainerValue, sizeLetter);

        String actualPartOfWord = penForPartOfWord.write(wordMoreThanInkValue);
        String expectedPartOfWord = wordMoreThanInkValue.substring(0, expectedInkContainerValue);

        Assert.assertEquals(actualPartOfWord, expectedPartOfWord, "Part of Word is not equals to expected");
    }

    @Test
    public void checkWritingNullWord() {
        Pen penForNullWord = new Pen(1000);

        try {
            penForNullWord.write(null);
        } catch(NullPointerException e) {
            Assert.fail("Exception while writing null word");
        }
    }

    @Test(timeOut = 2000, groups = {"checkColor"})
    public void checkDoSomethingElse() throws IOException {
        String expectedColor = "RED";
        Pen penDoSomething = new Pen(100, 1.0, expectedColor);

        File file = new File("d:\\temp.txt");
        PrintStream ps = new PrintStream(file);
        PrintStream standardOut = System.out;
        System.setOut(ps);
        penDoSomething.doSomethingElse();
        System.setOut(standardOut);
        Assert.assertEquals(Files.readAllLines(Paths.get(file.toURI())).get(0), expectedColor, "Pen's color is not equal to entered one");
    }

    @Test(enabled = false)
    public void checkTestStub() {
        System.out.println("all is fine");
    }

    @Test
    public void checkPenWithEmptyInkIsNotWork() {
        Pen penWithoutInk = new Pen(0);
        boolean actualWorkStatus = penWithoutInk.isWork();

        Assert.assertFalse(actualWorkStatus, "Pen is work without Ink");
    }

    @Test
    public void checkPenWithInkIsWork() {
        Pen penWithInk = new Pen(1);
        boolean actualWorkStatus = penWithInk.isWork();

        Assert.assertTrue(actualWorkStatus, "Pen is not work with Ink");
    }

    @Test
    public void checkPenWithNegativeInkValueIsNotWork() {
        Pen penWithNegativeInk = new Pen(-1);
        boolean actualWorkStatus = penWithNegativeInk.isWork();

        Assert.assertFalse(actualWorkStatus, "Pen is not work with Ink");
    }

    @Test
    public void checkCreatingPenWithNegativeInkValue() throws NoSuchFieldException, IllegalAccessException {
        int setInkContainerValue = -1;
        Pen penWithNegativeInk = new Pen(setInkContainerValue);

        int actualInkContainerValue = getInkContainerValueByReflection(penWithNegativeInk);

        Assert.assertTrue( actualInkContainerValue >= 0, "Set ink value is negative");
    }

    @Test
    public void checkInkContainerValueWithFractionalSizeLetter() throws NoSuchFieldException, IllegalAccessException {
        String expectedWord = "dev";
        int setInkContainerValue = 10;
        double sizeLetter = 0.1;
        Pen penWithNegativeInk = new Pen(setInkContainerValue, sizeLetter);
        double expectedInkContainerValue = setInkContainerValue - sizeLetter*expectedWord.length();

        penWithNegativeInk.write(expectedWord);

        double actualInkContainerValue = (double) getInkContainerValueByReflection(penWithNegativeInk);

        Assert.assertEquals(actualInkContainerValue, expectedInkContainerValue, "Ink Value is rounded and is not equal to expected value");
    }

    @Test
    public void checkNegativeSizeLetter() throws NoSuchFieldException, IllegalAccessException {
        double setSizeLetter = -1;
        Pen penWithNegativeSizeLetter = new Pen(100, setSizeLetter);

        double actualSizeLetter = getSizeLetterByReflection(penWithNegativeSizeLetter);

        Assert.assertTrue(actualSizeLetter > 0, "Size Letter is set negative");
    }

    @Test
    public void checkZeroSizeLetter() throws NoSuchFieldException, IllegalAccessException {
        double setSizeLetter = 0;
        Pen penWithNegativeSizeLetter = new Pen(100, setSizeLetter);

        double actualSizeLetter = getSizeLetterByReflection(penWithNegativeSizeLetter);

        Assert.assertTrue(actualSizeLetter > 0, "Size Letter is set zero");
    }

    @Test
    public void checkInkValueWithNegativeSizeLetter() throws NoSuchFieldException, IllegalAccessException {
        String expectedWord = "java";
        double setSizeLetter = -1;
        int initialInkContainerValue = 100;
        Pen penForInkWithNegativeSizeLetter = new Pen(initialInkContainerValue, setSizeLetter);

        penForInkWithNegativeSizeLetter.write(expectedWord);

        double actualInkContainerValue = getInkContainerValueByReflection(penForInkWithNegativeSizeLetter);

        Assert.assertFalse(actualInkContainerValue > initialInkContainerValue, "Ink is increased when user is writing");
    }

    @AfterMethod
    public void logEnd() {
        System.out.println("Test is finished.");
    }

    private int getInkContainerValueByReflection(Pen pen) throws NoSuchFieldException, IllegalAccessException {
        Field inkContainerValueField = pen.getClass().getDeclaredField("inkContainerValue");
        inkContainerValueField.setAccessible(true);
        return (Integer) inkContainerValueField.get(pen);
    }

    private double getSizeLetterByReflection(Pen pen) throws NoSuchFieldException, IllegalAccessException {
        Field sizeLetterField = pen.getClass().getDeclaredField("sizeLetter");
        sizeLetterField.setAccessible(true);
        return (Double) sizeLetterField.get(pen);
    }
}
